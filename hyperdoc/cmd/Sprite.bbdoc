:CreateSprite ( [parent] )

.args
parent (optional) - parent entity of sprite

.desc
Creates a sprite entity and returns its handle.  Sprites are simple flat (usually textured) rectangles made from two triangles.  Unlike other entity objects they don't actually have a mesh that can be manipulated.

The sprite will be positioned  at 0,0,0 and extend from 1,-1 to +1,+1. 

Sprites have two real strengths. The first is that they consist of only two  polygons; meaning you can use many of them at once. This makes them ideal for  particle effects and 2D-using-3D games where you want lots of sprites on-screen  at once. 

Secondly, sprites can be assigned a view mode using SpriteViewMode. By default this view mode is  set to 1, which means the sprite will always face the camera. So no matter what  the orientation of the camera is relative to the sprite, you will never actually  notice that they are flat; by giving them a spherical texture, you can make  them appear to look no different than a normal sphere.  

The optional parent parameter allow you to specify a parent entity for the  sprite so that when the parent is moved the child sprite will move with it.  However, this relationship is one way; applying movement commands to the child  will not affect the parent. 

Specifying a parent entity will still result in the sprite being created  at position 0,0,0 rather than at the parent entity's position.

Note:  Sprites have their own commands for rotation and scaling.

.also
LoadSprite;RotateSprite;ScaleSprite;HandleSprite;SpriteViewMode;PositionEntity;MoveEntity;TranslateEntity;EntityAlpha;FreeEntity

.code
Graphics3D 640,480

cam = CreateCamera()
MoveEntity cam,0,0,-5

sp = CreateSprite()
RotateSprite sp,20

RenderWorld:Flip
WaitKey
End

:LoadSprite ( tex_file$[,tex_flag][,parent] )

.args
text_file$ - filename of image file to be used as sprite

tex_flag (optional) - texture flag:
1: Color
2: Alpha
4: Masked
8: Mipmapped
16: Clamp U
32: Clamp V
64: Spherical reflection map

parent - parent of entity

.desc
Creates a sprite entity, and assigns a texture to it.

.also
LoadSprite;RotateSprite;ScaleSprite;HandleSprite;SpriteViewMode;PositionEntity;MoveEntity;TranslateEntity;EntityAlpha;FreeEntity

.code
Graphics3D 640,480

campivot = CreatePivot()
cam = CreateCamera(campivot)
MoveEntity cam,0,0,-5

sp = LoadSprite("grass.bmp")
SpriteViewMode sp,4

While Not KeyDown(1)
RenderWorld:Flip
TurnEntity campivot,1,1,3
Wend
End

:RotateSprite sprite,angle#

.args
sprite - sprite handle
angle# - absolute angle of sprite rotation

.desc
Rotates a sprite.

.also
CreateSprite;LoadSprite

.code
Graphics3D 640,480

cam = CreateCamera()
MoveEntity cam,0,0,-5

sp = CreateSprite()

ang# = 0
While Not KeyDown(1)
RenderWorld:Flip
RotateSprite sp,ang
ang = ang +3
Wend
End

:ScaleSprite sprite,x_scale#,y_scale#

.args
sprite - sprite handle
x_scale# - x scale of sprite
y scale# - y scale of sprite

.desc
Scales a sprite.

.also
LoadSprite;CreateSprite

.code
Graphics3D 640,480

cam = CreateCamera()
MoveEntity cam,0,0,-5

sp = CreateSprite()

size# = 1.0
While Not KeyDown(1)
RenderWorld:Flip
ScaleSprite sp,size,size
size = size + 0.01
Wend
End

:HandleSprite sprite,x_handle#,y_handle#

.args
sprite - sprite handle. Not to be confused with HandleSprite - ie. the handle  used to position the sprite, rather than the sprite's actual handle

.desc
Sets a sprite handle. Defaults to 0,0.

A sprite extends from -1,-1 to +1,+1.

.also
LoadSprite;CreateSprite

.code
Graphics3D 640,480

cam = CreateCamera()
MoveEntity cam,0,0,-5

sp = CreateSprite()

handlepos# = 0.0
While Not KeyDown(1)
RenderWorld
Color 100,100,100
Plot 320,240
Text 320,250,"Handle",True
Flip
HandleSprite sp,handlepos,handlepos
handlepos = handlepos + 0.01
Wend
End

:SpriteViewMode sprite,view_mode

.args
sprite - sprite handle

view_mode - view_mode of sprite
1: fixed (sprite always faces camera - default)
2: free (sprite is independent of camera)
3: upright1 (sprite always faces camera, but rolls with camera as well, unlike  mode no.1)
4: upright2 (sprite always remains upright. Gives a 'billboard' effect. Good  for trees, spectators etc.)

.desc
Sets the view mode of a sprite.

The view mode determines how a sprite  alters its orientation in respect to the camera. This allows the sprite to in  some instances give the impression that it is more than two dimensional. 

In technical terms, the four sprite modes perform the following changes: 

1: Sprite changes its pitch and yaw values to face camera, but doesn't roll.
2: Sprite does not change either its pitch, yaw or roll values.
3: Sprite changes its yaw and pitch to face camera, and changes its roll value  to match cameras.
4: Sprite changes its yaw value to face camera, but not its pitch value, and  changes its roll value to match cameras. 

Note that if you use sprite view mode 2, then because it is independent from  the camera, you will only be able to see it from one side unless you use EntityFx  flag 16 with it to disable backface culling.

.also
CreateSprite; LoadSprite

.code
; SpriteViewMode Example
; ----------------------

Graphics3D 640,480
SetBuffer BackBuffer()

pivot=CreatePivot()
PositionEntity pivot,0,1,0

camera=CreateCamera(pivot)
PositionEntity camera,0,0,10

light=CreateLight()
RotateEntity light,90,0,0

plane=CreatePlane()
ground_tex=LoadTexture("media/Chorme-2.bmp")
EntityTexture plane,ground_tex

sprite=LoadSprite("media/b3dlogo.jpg")
PositionEntity sprite,0,1,0

pitch=-15
yaw=180
roll=0
view_mode=1
view_mode_info$=" (fixed)"

While Not KeyDown(1)

If KeyDown(208)=True And pitch<0 Then pitch=pitch+1
If KeyDown(200)=True And pitch>-89 Then pitch=pitch-1
If KeyDown(205)=True Then yaw=yaw+1
If KeyDown(203)=True Then yaw=yaw-1
If KeyDown(30)=True Then roll=roll+1
If KeyDown(31)=True Then roll=roll-1

; Change sprite view mode depending on key pressed
If KeyHit(2)=True Then view_mode=1 : view_mode_info$=" (fixed)"
If KeyHit(3)=True Then view_mode=2 : view_mode_info$=" (free)"
If KeyHit(4)=True Then view_mode=3 : view_mode_info$=" (upright1)"
If KeyHit(5)=True Then view_mode=4 : view_mode_info$=" (upright2)"

; Set sprite view mode
SpriteViewMode sprite,view_mode

RotateEntity pivot,pitch,yaw,0
PointEntity camera,sprite,roll

RenderWorld

Text 0,0,"Use cursor keys to orbit camera around sprite"
Text 0,20,"Press A and S keys to roll camera"
Text 0,40,"Press keys 1-4 to change sprite view mode"
Text 0,60,"SpriteViewMode: "+view_mode+view_mode_info$

Flip

Wend

End

