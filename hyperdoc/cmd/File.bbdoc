:OpenFile (filename$)

.args
filename$ = any valid path and filename. The returned value is the filehandle  which is used by other file handling commands.

.desc
This command opens the designated file and prepares it to be updated. The  file must exists since this function will not create a new file.


By using FilePos and SeekFile the position within the file that is being read  or written can be determined and also changed. This allows a file to be read  and updated without having to make a new copy of the file or working through  the whole file sequentially. This could be useful if you have created a database  file and you want to find and update just a few records within it.


The file handle that is returned is an integer value that the operating system  uses to identify which file is to be read and written to and must be passed  to the functions such as ReadInt() and WriteInt().


Note extreme care needs to be exercised when updating files that contain strings  since these are not fixed in length.

.also
ReadFile;WriteFile;CloseFile;SeekFile

.code
; Changing part of a file using OpenFile, SeekFile and WriteInt

; Open/create a file to Write
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteInt( fileout, 1 )
WriteInt( fileout, 2 )
WriteInt( fileout, 3 )
WriteInt( fileout, 4 )
WriteInt( fileout, 5 )

; Close the file
CloseFile( fileout )

DisplayFile( "The file as originally written", mydata.dat" )
; Open the file and change the Third Integer

file = OpenFile("mydata.dat")
SeekFile( file, 8 ) ; Move to the third integer in the file
WriteInt( file, 9999 ) ; Replace the original value with 9999
CloseFile( file )

DisplayFile( "The file after being midified", "mydata.dat" )
WaitKey()
; **** Function Definitions follow ****

; Read the file and print it
Function DisplayFile( Tittle$, Filename$ )
Print tittle$
filein = ReadFile( Filename$ )
While Not Eof( filein )
Number = ReadInt( filein )
Print Number
Wend
CloseFile( filein )
Print
End Function

:ReadFile (filename$)

.args
filename$ = any valid path and filename. The returned value is the filehandle  which is an integer value.

.desc
This command opens the designated filename and prepares it to be read from.  Use this to read back your own configuration file, save game data, etc. also  useful for reading custom types from a files. The filehandle that is returned  is an integer value that the operating system uses to identify which file is  to be read from and must be passed to the functions such as ReadInt(). If the  file could not be opened, for instance, if it does not exists, then the filehandle  is Zero.

.code
; Reading and writing custom types to files using ReadFile, WriteFile and  CloseFile 

; Initialise some variables for the example
Type HighScore
Field Name$
Field Score%
Field Level%
End Type

Best.HighScore = New HighScore
BestName = "Mark"
BestScore = 11657
BestLevel = 34

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteString( fileout, BestName )
WriteInt( fileout, BestScore )
WriteByte( fileout, BestLevel )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

; Lets read the Greatest score from the file
Greatest.HighScore = New HighScore
GreatestName$ = ReadString$( filein )
GreatestScore = ReadInt( filein )
GreatestLevel = ReadByte( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "High score record read from - mydata.dat "
Print
Write "Name = "
Print GreatestName
Write "Score = "
Print GreatestScore
Write "Level = "
Print GreatestLevel

WaitKey()

:WriteFile (filename$)

.args
filename$ = any valid path and filename. The returned value is the filehandle  which is an integer value.

.desc
This command opens the designated filename and prepares it to be written  to. Use this to write your own configuration file, save game data, etc. also  useful for saving custom types to files. The filehandle that is returned is  an integer value that the operating system uses to identify which file is to  be written to and must be passed to the functions such as WriteInt(). If the  file could not be opened then the filehandle is Zero.

.code
; Reading and writing custom types to files using ReadFile, WriteFile and  CloseFile

; Initialise some variables for the example
Type HighScore
Field Name$
Field Score%
Field Level%
End Type

Best.HighScore = New HighScore
BestName = "Mark"
BestScore = 11657
BestLevel = 34

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteString( fileout, BestName )
WriteInt( fileout, BestScore )
WriteByte( fileout, BestLevel )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

; Lets read the Greatest score from the file
Greatest.HighScore = New HighScore
GreatestName$ = ReadString$( filein )
GreatestScore = ReadInt( filein )
GreatestLevel = ReadByte( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "High score record read from - mydata.dat "
Print
Write "Name = "
Print GreatestName
Write "Score = "
Print GreatestScore
Write "Level = "
Print GreatestLevel

WaitKey()

:CloseFile filehandle

.args
filehandle = variable defined with the WriteFile or OpenFile command

.desc
Use this command to close a file previously opened. You should always close  a file as soon as you have finished reading or writing to it.

.code
; Reading and writing custom types to files using ReadFile, WriteFile and  CloseFile

; Initialise some variables for the example
Type HighScore
Field Name$
Field Score%
Field Level%
End Type

Best.HighScore = New HighScore
BestName = "Mark"
BestScore = 11657
BestLevel = 34

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteString( fileout, BestName )
WriteInt( fileout, BestScore )
WriteByte( fileout, BestLevel )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

; Lets read the Greatest score from the file
Greatest.HighScore = New HighScore
GreatestName$ = ReadString$( filein )
GreatestScore = ReadInt( filein )
GreatestLevel = ReadByte( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "High score record read from - mydata.dat "
Print
Write "Name = "
Print GreatestName
Write "Score = "
Print GreatestScore
Write "Level = "
Print GreatestLevel

WaitKey()

:FilePos (filehandle)

.args
filehandle = the variable returned by the Readfile WriteFile or OpenFile  when the file was opened. The value returned is the offset from the start of  the file. ( 0 = Start of the file )

.desc
This command returns the current position within a file that is being processed  following ReadFile, WriteFile or OpenFile. The returned integer is the offsets  in bytes from the start of the file to the current read/write position. Note,  this is zero when pointing to the first byte of the file.


By using FilePos and SeekFile the position within the file that is being read  or written can be determined and also changed. This allows a file to be read  and updated without having to make a new copy of the file or working through  the whole file sequentially. This could be useful if you have created a database  file and you want to find and update just a few records within it. It is also  possible to create an index file that contains pointers to where each record  starts in a data file.

.code
; Changing part of a file using OpenFile, SeekFile, FilePos
; note FilePos is used in the SearchFile function at the end of this example

; Open/create a file to Write
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteInt( fileout, 1 )
WriteInt( fileout, 2 )
WriteInt( fileout, 3 )
WriteInt( fileout, 4 )
WriteInt( fileout, 5 )

; Close the file
CloseFile( fileout )

DisplayFile( "The file as originally written", mydata.dat" )
Position = SearchFile( 4 , "mydata.dat" )
Write "Value 4 was found "
Write Position
Print " bytes from the start."
Print

; Open the file and change the value 3 to 9999

file = OpenFile("mydata.dat")
SeekFile( file, Position ) ; Move to the found location
WriteInt( file, 9999 ) ; Replace the original value with 9999
CloseFile( file )


DisplayFile( "The file after being modified", "mydata.dat" )
WaitKey()
End ; End of program

; **** Function Definitions follow ****

; Read the file and print it
Function DisplayFile( Tittle$, Filename$ )
Print tittle$
file = ReadFile( Filename$ )
While Not Eof( file )
Number = ReadInt( file )
Print Number
Wend
CloseFile( file )
Print
End Function

; Search a file of integers for the Wanted data value
; Note the need to subtract 4 from the location since having read it
; we are now pointing at the next Integer also Return() was placed
; after closing the file so it is closed properly
Function SearchFile( Wanted, Filename$ )
file = ReadFile( Filename$ )
While Not Eof( file )
If ReadInt( file ) = Wanted Then Location = FilePos( file ) - 4
Wend
CloseFile( file )
Return( Location )
End Function

:SeekFile (filehandle, offset)

.args
filehandle = the variable returned by the Readfile, WriteFile or OpenFile  when the file was opened. The value returned is the offset from the start of  the file. ( 0 = Start of the file )

.desc
This command allows the position in a file to be changed. This allows random  access to data within files and can be used with files opened by ReadFile, WriteFile  and OpenFile. Note, the offset is the number of bytes from the start of the  file, where the first byte is at offset 0. It is important to take account of  the size of the data elements in your file.


For instance Integers are 4 bytes long so the first integer in the file is at  offset 0 and the second at offset 4. If you write Custom Data types out then  you must work out haw many bytes each takes so that you can move about the file  correctly. Seeking beyond the end of a file does not generate an error but the  data is not read or written to the file, and may course unknown side effects.


By using FilePos and SeekFile the position within the file that is being read  or written can be determined and also changed. This allows a file to be read  and updated without having to make a new copy of the file or working through  the whole file sequentially. This could be useful if you have created a database  file and you want to find and update just a few records within it. It is also  possible to create an index file that contains pointers to where each record  starts in a data file.


To calculate an offset you need to know how long each data element is; Offset  = Wanted_Element * size_of_element - size_of_element


For example a file of integers which are 4 bytes long is calculated by:


The 7th integer is at offset 7 * 4 - 4 i.e. 24


Note, extreme care needs to be exercised when updating files that contain strings  since these are not fixed in length.

.code
; Changing part of a file using OpenFile, SeekFile, FilePos

; Open/create a file to Write
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteInt( fileout, 100 )
WriteInt( fileout, 200 )
WriteInt( fileout, 300 )
WriteInt( fileout, 400 )
WriteInt( fileout, 500 )

; Close the file
CloseFile( fileout )

DisplayFile( "The file as originally written", mydata.dat" )

Print "Data read in random order"
; Open the file to read just the 4th and 2nd elements from

file = OpenFile("mydata.dat")

; read and print the 4th integer ie 4*4-4 = 12 byte from the start of the file
SeekFile( file, 12 ) ; Move to the found location
Number = ReadInt( file )
Print Number

; read and print the 2th integer ie 2*4-4 = 4 bytes from the start of the file
SeekFile( file, 4 ) ; Move to the found location
Number = ReadInt( file )
Print Number

CloseFile( file )

Waitkey()
End ; End of program

; **** Function Definitions follow ****
; Read the file and print it
Function DisplayFile( Tittle$, Filename$ )
Print tittle$
file = ReadFile( Filename$ )
While Not Eof( file )
Number = ReadInt( file )
Print Number
Wend
CloseFile( file )
Print
End Function

:ReadDir (directory)

.args
directory = full path and name of folder/directory to open

.desc
In file operations, you will often need to parse through a directory/folder  and retrieve unknown filenames and other folders from it. This command opens  a specified folder to begin these operations. The command returns a file handle  which is used by the other commands to perform other services (like most file  operators). You will use the NextFile$ to iterate  through each entry (use FILETYPE to see if it is  a file or folder). Remember, once completed, good programming practice dictates  that you CloseDir the open folder. The example should  help out alot.

.code
; ReadDir/NextFile$/CloseDir example

; Define what folder to start with ...
folder$="C:"

; Open up the directory, and assign the handle to myDir
myDir=ReadDir(folder$)

; Let's loop forever until we run out of files/folders to list!
Repeat
; Assign the next entry in the folder to file$
file$=NextFile$(myDir)

; If there isn't another one, let's exit this loop
If file$="" Then Exit

; Use FileType to determine if it is a folder (value 2) or a file and print  results
If FileType(folder$+"\"+file$) = 2 Then
Print "Folder:" + file$
Else
Print "File:" + file$
End If
Forever

; Properly close the open folder
CloseDir myDir

; We're done!
Print "Done listing files!"

:CloseDir filehandle

.args
filehandle = valid filehandle assigned from the ReadDir command

.desc
Once you are finished with NextFile$ on the  directory previously opened for read with the ReadDir  command, use this command to close the directory. This is good programming practice!


.also
ReadDir, NextFile$

.code
; ReadDir/NextFile$/CloseDir example

; Define what folder to start with ...
folder$="C:"

; Open up the directory, and assign the handle to myDir
myDir=ReadDir(folder$)

; Let's loop forever until we run out of files/folders to list!
Repeat
; Assign the next entry in the folder to file$
file$=NextFile$(myDir)

; If there isn't another one, let's exit this loop
If file$="" Then Exit

; Use FileType to determine if it is a folder (value 2) or a file and print  results
If FileType(folder$+"\"+file$) = 2 Then
Print "Folder:" + file$
Else
Print "File:" + file$
End If
Forever

; Properly close the open folder
CloseDir myDir

; We're done!
Print "Done listing files!"

:NextFile$ (filehandle)

.args
filehandle = valid filehandle assigned from the ReadDir command

.desc
This command will return the NEXT file or folder from the currently open  directory (use ReadDir to open the desired folder  for reading). This will return a string containing the folder name or the filename  plus extention. Use FILETYPE to determine if it is  a file or folder. See ReadDir and CloseDir for more. You cannot move 'backwards' through  a directory, only forward. You might want to parse the contents of a directory  into an array for display, processing, etc.

.code
; ReadDir/NextFile$/CloseDir example

; Define what folder to start with ...
folder$="C:"

; Open up the directory, and assign the handle to myDir
myDir=ReadDir(folder$)

; Let's loop forever until we run out of files/folders to list!
Repeat
; Assign the next entry in the folder to file$
file$=NextFile$(myDir)

; If there isn't another one, let's exit this loop
If file$="" Then Exit

; Use FileType to determine if it is a folder (value 2) or a file and print  results
If FileType(folder$+"\"+file$) = 2 Then
Print "Folder:" + file$
Else
Print "File:" + file$
End If
Forever

; Properly close the open folder
CloseDir myDir

; We're done!
Print "Done listing files!"

:CurrentDir$()

.args
None.

.desc
This command will return the currently selected directory for disk operations,  useful for advanced file operations. Use CHANGEDIR  to change the current directory. The value returned doesn't have a trailing  slash - aside from the root directory of the drive.

.code
; CurrentDir$() example

; Print the current directory until ESC key
While Not KeyHit(1)
Print CurrentDir$()
Wend

:ChangeDir directory/path

.args
directory/path = full path to directory/folder

.desc
This command will change the currently selected directory for disk operations,  useful for advanced file operations. Use CURRENTDIR$()  to see what the current directory is.

Use a directory/path of ".." to change to the parent of the current directory,  unless you are at the root directory of the drive, then no change happens.

.code
; ChangeDir example

ChangeDir "c:winntsystem32"
Print "The folder has been changed to: " + currentdir$()

:CreateDir path/name

.args
path/name = full path and name for new directory

.desc
Creates a directory (file folder) at the destination specified. Do not use  a trailing slash at the end of the path/name parameter. You cannot be sure the  directory was created with this command, so you will need to verify its existance  yourself (use the FILETYPE command).

.code
; CREATEDIR example

fldr$="c:winntsystem32myfolder"
createDir fldr$
Print "Folder created!"

:DeleteDir directory/path

.args
directory/path = full path/name of directory

.desc
Deletes a specified folder/directory from the device. Note: This only works  on EMPTY directories - you cannot delete a folder with other folders or files  inside with this command. Do not apply a trailing slash.

.code
; DeleteDir example

DeleteDir "C:	est"

:FileType (filename$)

.args
filename$ = any valid variable with path/filename

.desc
This command checks the filename you pass and determines if it exists and  whether or not it is a valid filename or if it is a directory. Here are the  values it returns:


1 = The filename exists

0 = The filename doesn't exist

2 = The filename is not a file - but a directory


Use this to validate that a file exists before you do something to it.

.code
; Windows 9x users will need to change location of calc.exe

filename$="c:winntsystem32calc.exe"

if fileType(filename$)=1 then Print "The file exists!"
if fileType(filename$)=0 then Print "File not found!"
if fileType(filename$)=2 then Print "This is a directory!"

Print "Press any key to quit."

WaitKey()

:FileSize (filename$)

.args
filename$ = any valid variable with path/filename

.desc
Often it will be useful to return the size of a file. File size is important  for copying, reading, and other file evolutions.

.code
; Windows 2000/XP users will need to change location of calc.exe

filename$="c:\windows\calc.exe"

Print "The size of the file is: " + FileSize(filename$)

Print "Press any key to quit."

WaitKey()

:CopyFile from$, to$

.args
from$ = valid path/filename to the file to be copied
to$ = valid path/filename to copy the file to

.desc
Use this command to copy a file from one location to another. Perhaps you'll  write your own installer and need to copy files from the installation folder  to the installed location folder. Make sure you do your own validation to ensure  that the files/paths are valid and accurate before executing this command.

.code
file$="c:autoexec.bat"
destination$="a:autoexec.bat"

Print "Press any key to copy your Autoexec.bat file to floppy"

WaitKey()

CopyFile file$,destination$

:DeleteFile path/filename

.args
path/filename = full path/filename to the file to delete

.desc
Deletes a specified file from the drive. You will need to make sure the  file exists before execution and be sure its been deleted AFTER execution. Use FILETYPE to determine this.

.code
; DELETEFILE example

DeleteFile "C:	estmyfile.bb"

