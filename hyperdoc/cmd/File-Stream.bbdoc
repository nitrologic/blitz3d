:Eof (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+)

.desc
Checks to see if the End of File of an opened file or stream has been reached.  Use this to determine if you should continue to pull more information from a  file/stream or not. Use this to read a text file of unknown length (say a README.TXT)  and display it. See example.


Eof returns 1 if eof has been reached or, in the case of a TCP stream, the stream  has been 'nicely' closed.


Eof returns -1 if something has gone wrong during stream processing.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Eof sample

file$="c:autoexec.bat"

filein = ReadFile(file$)

Print "Here is your Autoexec.bat file ..."

; Loop this until we reach the end of file
While Not Eof(filein)
Print ReadLine$(filein)
Wend


:ReadAvail (filehandle/streamhandle)

.args
filehandle/streamhandle = handle assigned to the file or stream when originally  opened.

.desc
In the case of file streams, this reflects how much data is internally buffered.  In the case of TCP streams, this reflects how much data has 'arrived'. 

.code
; OpenTCPStream/CloseTCPStream/ReadAvail Example

Print "Connecting..."
tcp=OpenTCPStream( "www.blitzbasement.com",80 )

If Not tcp Print "Failed.":WaitKey:End

Print "Connected! Sending request..."

WriteLine tcp,"GET http://www.blitzbasement.com HTTP/1.0"
WriteLine tcp,Chr$(10)

If Eof(tcp) Print "Failed.":WaitKey:End

Print "Request sent! Waiting for reply..."

While Not Eof(tcp)
Print ReadLine$( tcp )
Print "Bytes available:" + ReadAvail(tcp)
Wend

If Eof(tcp)=1 Then Print "Success!" Else Print "Error!"

CloseTCPStream tcp

WaitKey


:ReadByte ( filehandle/stream )

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+)

.desc
Once you've opened a disk file (or stream) for reading, use this command  to read a single byte at a time from the file/stream. Note, a byte is an integer  that can take the values 0..255 and occupies 8 bits of storage. Since characters  are stored as byte values this function can be used to read a file one character  at a time. Reading beyond the end of file does not result in an error, but each  value read will be zero.


Advanced notes


The number that is stored by WriteByte is actually the least significant byte  of an integer so negative numbers and numbers above 255 will still have a value  between 0..255. Unless you understand how 32 bit integers are stored in 2's  compliment notation this will seem strange but it is NOT a bug.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadByte and WriteByte functions

; Initialise some variables for the example
Byte1% = 10 ; store 10
Byte2% = 100 ; store 100
Byte3% = 255 ; store 255 ( the maximum value that can be stored in a Byte)
Byte4% = 256 ; try to store 256 this will end up as 0 ( i.e. 256 - 256 = 0 )
Byte5% = 257 ; try to store 257 this will end up as 1 ( i.e. 257 - 256 = 1 )
Byte6% = -1 ; try to store -1 this will end up as 255 ( i.e. 256 -1 = 255 )
Byte7% = -2 ; try to store 256 this will end up as 254 ( i.e. 256 - 2 = 254  )
Byte8% = Asc("A") ; Store the ASCII value for the Character "A" ( i.e. 65 )

; Open a file to write to
fileout = WriteFile("mydata.dat ")

; Write the information to the file
WriteByte( fileout, Byte1 )
WriteByte( fileout, Byte2 )
WriteByte( fileout, Byte3 )
WriteByte( fileout, Byte4 )
WriteByte( fileout, Byte5 )
WriteByte( fileout, Byte6 )
WriteByte( fileout, Byte7 )
WriteByte( fileout, Byte8 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadByte( filein )
Read2 = ReadByte( filein )
Read3 = ReadByte( filein )
Read4 = ReadByte( filein )
Read5 = ReadByte( filein )
Read6 = ReadByte( filein )
Read7 = ReadByte( filein )
Read8 = ReadByte( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Written - Read"
Write Byte1 + " - " : Print Read1
Write Byte2 + " - " : Print Read2
Write Byte3 + " - " : Print Read3
Write Byte4 + " - " : Print Read4
Write Byte5 + " - " : Print Read5
Write Byte6 + " - " : Print Read6
Write Byte7 + " - " : Print Read7
Write Byte8 + " - " : Print Chr$( Read8 )

WaitKey()


:ReadShort (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+)
The value returned is an integer in the range 0-65535.

.desc
Once you've opened a disk file (or stream) for reading, use this command  to read a single short integer (16bit) value from the file. Note, each value  written uses 2 bytes of disk space and is written least significant byte first.  Reading beyond the end of file does not result in an error, but each value read  will be zero.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadShort and WriteShort functions

; Initialise some variables for the example
Int1% = 10 ; store 10
Int2% = 365 ; store 365
Int3% = 32767 ; 32767 is the largest positive Short Integer Value in BlitzBasic  )
Int4% = -32768 ; -32768 the largest negative Short Integer Value in BlitzBasic  )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteShort( fileout, Int1 )
WriteShort( fileout, Int2 )
WriteShort( fileout, Int3 )
WriteShort( fileout, Int4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadShort( filein )
Read2 = ReadShort( filein )
Read3 = ReadShort( filein )
Read4 = ReadShort( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Short Integer Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:ReadInt (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+)
The value returned is an integer in the range -2147483648 to 2147483647

.desc
Once you've opened a disk file (or stream) for reading, use this command  to read a single integer value from the file. Note, each value written uses  4 bytes of space and is written least significant byte first. Reading beyond  the end of file does not result in an error, but each value read will be zero.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadInt and WriteInt functions

; Initialise some variables for the example
Int1% = 10 ; store 10
Int2% = 365 ; store 365
Int3% = 2147483647 ; store 2147483647 the largest positive Integer Value in  BlitzBasic )
Int4% = - 2147483648 ; store -2147483648 the largest negative Integer Value  in BlitzBasic )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteInt( fileout, Int1 )
WriteInt( fileout, Int2 )
WriteInt( fileout, Int3 )
WriteInt( fileout, Int4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadInt( filein )
Read2 = ReadInt( filein )
Read3 = ReadInt( filein )
Read4 = ReadInt( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Integer Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:ReadFloat (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+) The value returned is a floating point number.

.desc
Once you've opened a disk file (or stream) for reading, use this command  to read a single floating point number from the file. Note, each value written  uses 4 bytes of space. Reading beyond the end of file does not result in an  error, but each value read will be zero.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadFloat and WriteFloat functions

; Initialise some variables for the example
Num1# = 10.5 ; store 10.5
Num2# = 365.25 ; store 365.25
Num3# = 32767.123 ; 32767.123 is the largest positive Short Integer Value in  BlitzBasic )
Num4# = -32768.123 ; -32768.123 the largest negative Short Integer Value in  BlitzBasic )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteFloat( fileout, Num1 )
WriteFloat( fileout, Num2 )
WriteFloat( fileout, Num3 )
WriteFloat( fileout, Num4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1# = ReadFloat( filein )
Read2# = ReadFloat( filein )
Read3# = ReadFloat( filein )
Read4# = ReadFloat( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Floating Point Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:ReadString$ (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+) The value returned is a text string.

.desc
Once you've opened a disk file (or stream) for reading, use this command to read a string variable from the file.


Each string is stored in the file as a 4 byte (32bit) integer followed by the characters that form the string. The integer contains the number of characters  in the string, i.e. its length. Note, that Carriage Return, Line Feed and Null  characters are NOT use to indicate the end of the string. A file of strings  cannot be read like a text file, since it contains string variables and not  text. A null string, i.e. a string of zero length ("") is stored as 4 bytes,  an integer count with a value = zero, followed by no Characters. Note strings are not limited to 255 characters as in some languages. Reading beyond the end  of file does not result in an error, but each value read will be a zero length string.


This command should only be used when reading from a binary file or stream.  Text files should be interrogated using ReadLine.


Streams can only be used in Blitz Basic v1.52 or greater.

.also
WriteString;OpenTCPStream;ReadFile;ReadLine;ReadByte;ReadShort;ReadInt;ReadFloat;ReadBytes;ReadAvail

.code
; Reading and writing a file using ReadString$ and WriteString functions

; Initialise some variables for the example
String1$ = "A short string"
String2$ = "A longer string since these are variables lengths"
String3$ = "This is string3 "
String4$ = "joined to string4"

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteString( fileout, String1 )
WriteString( fileout, String2 )
WriteString( fileout, String3 + String4)
WriteString( fileout, "Just to show you don't have to use variables" )

; Close the file
CloseFile( fileout )
; Open the file to Read
filein = ReadFile("mydata.dat")

Read1$ = ReadString$( filein )
Read2$ = ReadString$( filein )
Read3$ = ReadString$( filein )
Read4$ = ReadString$( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "String Variables Read From File - mydata.dat "
Print
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()

:ReadLine$ (filehandle/stream)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+). The value returned is a text string.

.desc
Once you've opened a disk file (or stream) for reading, use this command  to read a whole line of text from a text file or stream. Each line of text is  returned as a string variable. This function can be used to read plain text  files.


Characters are read from the input file until an "end-of-line" mark is found.  An "end-of-line" can be a single carriage return (0Dh) or a single linefeed  (0Ah) or carriage return followed by a linefeed (0Dh, 0Ah). Reading beyond the  end of file does not result in an error, but each value read will be a zero  length string.


ReadLine$ returns all chars except chr$(13)/chr$(10).


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadLine$ and WriteLine functions

; Initialise some variables for the example
String1$ = "Line 1 is short"
String2$ = "Line 2 is a longer line but they can be much longer"
String3$ = "Line 3 is made up "
String4$ = "of two parts joined together."

; Open a file to write to
fileout = WriteFile("mydata.txt")

; Write the information to the file
WriteLine( fileout, String1 )
WriteLine( fileout, String2 )
WriteLine( fileout, String3 + String4)
WriteLine( fileout, "Just to show you don't have to use variables" )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.txt")

Read1$ = ReadLine$( filein )
Read2$ = ReadLine$( filein )
Read3$ = ReadLine$( filein )
Read4$ = ReadLine$( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Lines of text read from file - mydata.txt "
Print
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()

:ReadBytes bank,file/stream,offset,count

.args
bank = variable containing handle to valid bank
file/stream = file handle of previously opened file or stream
offset = offset in bytes to write the value
count = how many bytes to write from the offset

.desc
You can read the contents of a disk file (or stream) to a memory bank using  this command.


Note: The file handle must be opened with OpenFile  or OpenTCPStream and subsequently closed with CloseFile or CloseTCPStream  after the reading operations are complete.


Return how many bytes successfully read from a stream.


Streams can only be used in Blitz Basic v1.52 or greater.

.also
WriteBytes

.code
; Read/WriteBytes Commands Example

; Create a 50 byte memory bank
bnkTest=CreateBank(500)

; Let's fill the bank with random data
For t = 1 To 50

	PokeByte bnkTest,t,Rnd(255)
	
Next

; Open a file to write to
fileBank=WriteFile("test.bnk")
; Write the bank to the file
WriteBytes bnkTest,fileBank,0,50
; Close it
CloseFile fileBank

; Free the bank
FreeBank bnkTest

; Make a new one
bnkTest=CreateBank(500)

; Open the file to read from
fileBank=OpenFile("test.bnk")
; Write the bank to the file
ReadBytes bnkTest,fileBank,0,50
; Close it
CloseFile fileBank

; Write back the results!
For t = 1 To 50
	
	Print PeekByte (bnkTest,t)

Next

:WriteByte (filehandle/stream, mybyte)

.args
filehandle/stream = a valid variable set with the OpenFile, ReadFile command,  or OpenTCPStream (v1.52+)
mybyte = can be an Integer or a floating point number, but only values between  0 and 255 will be stored faithfully. 

.desc
Once you've opened a disk file (or stream) for reading, use this command  to write a single byte at a time to the file/stream. Note, a byte is an integer  that can take the values 0..255 and occupies 8 bits of storage. Since characters  are stored as byte values this function can be used to create a text file one  character at a time.


Advanced notes:


The number that is stored by WriteByte is actually the least significant byte  of an integer so negative numbers and numbers above 255 will still have a value  between 0..255. Unless you understand how 32 bit integers are stored in 2's  compliment notation this will seem strange but it is NOT a bug.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and Writing a file using ReadByte and WriteByte functions

; Initialise some variables for the example
Byte1% = 10 ; store 10
Byte2% = 100 ; store 100
Byte3% = 255 ; store 255 ( the maximum value that can be stored in a Byte )
Byte4% = 256 ; try to store 256 this will end up as 0 ( i.e. 256 - 256 = 0 )
Byte5% = 257 ; try to store 257 this will end up as 1 ( i.e. 257 - 256 = 1 )
Byte6% = -1 ; try to store -1 this will end up as 255 ( i.e. 256 -1 = 255 )
Byte7% = -2 ; try to store 256 this will end up as 254 ( i.e. 256 - 2 = 254  )
Byte8% = Asc("A") ; Store the ASCII value for the Character "A" ( i.e. 65 )

; Open a file to write to
fileout = WriteFile("mydata.dat ")

; Write the information to the file
WriteByte( fileout, Byte1 )
WriteByte( fileout, Byte2 )
WriteByte( fileout, Byte3 )
WriteByte( fileout, Byte4 )
WriteByte( fileout, Byte5 )
WriteByte( fileout, Byte6 )
WriteByte( fileout, Byte7 )
WriteByte( fileout, Byte8 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadByte( filein )
Read2 = ReadByte( filein )
Read3 = ReadByte( filein )
Read4 = ReadByte( filein )
Read5 = ReadByte( filein )
Read6 = ReadByte( filein )
Read7 = ReadByte( filein )
Read8 = ReadByte( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Written - Read"
Write Byte1 + " - " : Print Read1
Write Byte2 + " - " : Print Read2
Write Byte3 + " - " : Print Read3
Write Byte4 + " - " : Print Read4
Write Byte5 + " - " : Print Read5
Write Byte6 + " - " : Print Read6
Write Byte7 + " - " : Print Read7
Write Byte8 + " - " : Print Chr$( Read8 )

WaitKey()


:WriteShort (filehandle/stream, myinteger)

.args
filehandle/stream = a valid variable set with the OpenFile, WriteFile command,  or OpenTCPStream (v1.52+)
myinteger = an integer variable (a floating point number can be used but this  will be converted to an integer before saving so only the integer part will  be saved) 

.desc
Once you've opened a disk file (or stream) for writing, use this command  to write a single short integer (16 bit) value to the file. Note, each value  written uses 2 bytes and is written least significant byte first. The range  of the value saved is 0-65535


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadShort and WriteShort functions

; Initialise some variables for the example
Int1% = 10 ; store 10
Int2% = 365 ; store 365
Int3% = 32767 ; 32767 is the largest positive Short Integer Value in BlitzBasic  )
Int4% = -32768 ; -32768 the largest negative Short Integer Value in BlitzBasic  )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteShort( fileout, Int1 )
WriteShort( fileout, Int2 )
WriteShort( fileout, Int3 )
WriteShort( fileout, Int4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadShort( filein )
Read2 = ReadShort( filein )
Read3 = ReadShort( filein )
Read4 = ReadShort( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Short Integer Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:WriteInt (filehandle/stream, myinteger)

.args
filehandle/stream = a valid variable set with the OpenFile, WriteFile command,  or OpenTCPStream (v1.52+)
myinteger = an integer variable (a floating point number can be used but this  will be converted to an integer before saving so only the integer part will  be saved) 

.desc
Once you've opened a disk file (or stream) for writing, use this command  to write a single integer value to the file. Note, each value written uses 4  bytes and is written least significant byte first. The range of the value saved  is -2147483648 to 2147483647


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadInt and WriteInt functions

; Initialise some variables for the example
Int1% = 10 ; store 10
Int2% = 365 ; store 365
Int3% = 2147483647; store 2147483647 the largest positive Integer Value in BlitzBasic  )
Int4% = - 2147483648 ; store -2147483648 the largest negative Integer Value  in BlitzBasic )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteInt( fileout, Int1 )
WriteInt( fileout, Int2 )
WriteInt( fileout, Int3 )
WriteInt( fileout, Int4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1 = ReadInt( filein )
Read2 = ReadInt( filein )
Read3 = ReadInt( filein )
Read4 = ReadInt( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Integer Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:WriteFloat (filehandle/stream, myFloat)

.args
filehandle/stream = a valid variable set with the OpenFile, WriteFile command,  or OpenTCPStream (v1.52+)
myFloat = a floating point variable

.desc
Once you've opened a disk file (or stream) for writing, use this command  to write a single floating point number to the file. Note, each value written  uses 4 bytes.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadFloat and WriteFloat functions

; Initialise some variables for the example
Num1# = 10.5 ; store 10.5
Num2# = 365.25 ; store 365.25
Num3# = 32767.123 ; 32767.123 is the largest positive Short Integer Value in  BlitzBasic )
Num4# = -32768.123 ; -32768.123 the largest negative Short Integer Value in  BlitzBasic )

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteFloat( fileout, Num1 )
WriteFloat( fileout, Num2 )
WriteFloat( fileout, Num3 )
WriteFloat( fileout, Num4 )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1# = ReadFloat( filein )
Read2# = ReadFloat( filein )
Read3# = ReadFloat( filein )
Read4# = ReadFloat( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Floating Point Data Read From File - mydata.dat "
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:WriteString (filehandle/stream, mystring$)

.args
filehandle/stream = a valid variable set with the OpenFile, WriteFile command,  or OpenTCPStream (v1.52+)
mystring$ = any string variable or text contained between quotes. 

.desc
Once you've opened a disk file (or stream) for writing, use this command  to write a string variable to the file.


Each string is stored in the file as a 4 byte (32bit) integer followed by the  characters that form the string. The integer contains the number of characters  in the string, i.e. its length. Note, that Carriage Return, Line Feed and Null  characters are NOT use to indicate the end of the string. A file of strings  cannot be read like a text file, since it contains string variables and not  text. A null string, i.e. a string of zero length ("") is stored as 4 bytes,  an integer count with a value = zero, followed by no Characters. Note strings  are not limited to 255 characters as in some languages. Reading beyond the end  of file does not result in an error, but each value read will be a zero length  string.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadString$ and WriteString functions

; Initialise some variables for the example
String1$ = "A short string"
String2$ = "A longer string since these are variables lengths"
String3$ = "This is string3 "
String4$ = "joined to string4"

; Open a file to write to
fileout = WriteFile("mydata.dat")

; Write the information to the file
WriteString( fileout, String1 )
WriteString( fileout, String2 )
WriteString( fileout, String3 + String4)
WriteString( fileout, "Just to show you don't have to use variables" )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.dat")

Read1$ = ReadString$( filein )
Read2$ = ReadString$( filein )
Read3$ = ReadString$( filein )
Read4$ = ReadString$( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "String Variables Read From File - mydata.dat "
Print
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:WriteLine$ (filehandle/stream, string$)

.args
filehandle/stream = a valid variable set with the OpenFile, WriteFile command,  or OpenTCPStream (v1.52+). The value returned is a text string.
string$ = valid string value.

.desc
Once you've opened a disk file (or stream) for writing, use this command  to right a whole line of text to the file. Each line of text is automatically  terminated with an "end-of-line" mark, consisting of a Carriage Return character  followed by a LineFeed character. (i.e. 0Dh, 0Ah ) This function can be used  to make plain text files.


Streams can only be used in Blitz Basic v1.52 or greater.

.code
; Reading and writing a file using ReadLine$ and WriteLine functions

; Initialise some variables for the example
String1$ = "Line 1 is short"
String2$ = "Line 2 is a longer line but they can be much longer"
String3$ = "Line 3 is made up "
String4$ = "of two parts joined together."

; Open a file to write to
fileout = WriteFile("mydata.txt")

; Write the information to the file
WriteLine( fileout, String1 )
WriteLine( fileout, String2 )
WriteLine( fileout, String3 + String4)
WriteLine( fileout, "Just to show you don't have to use variables" )

; Close the file
CloseFile( fileout )

; Open the file to Read
filein = ReadFile("mydata.txt")

Read1$ = ReadLine( filein )
Read2$ = ReadLine$( filein )
Read3$ = ReadLine$( filein )
Read4$ = ReadLine$( filein )

; Close the file once reading is finished
CloseFile( filein )

Print "Lines of text read from file - mydata.txt "
Print
Print Read1
Print Read2
Print Read3
Print Read4

WaitKey()


:WriteBytes bank,filehandle/stream,offset,count

.args
bank = variable containing handle to valid bank
filehandle/stream = a valid variable set with the WriteFile or OpenTCPStream  (v1.52+)
offset = offset in bytes to write the value
count = how many bytes to write from the offset

.desc
You can write the contents of a memory bank to a file on disk (or stream)  using this command.


Note: The file handle must be opened with WriteFile  or OpenTCPStream and subsequently closed with CloseFile or CloseTCPStream  after the writing operations are complete.

Return how many bytes successfully written to a stream.


Streams can only be used in Blitz Basic v1.52 or greater.

.also
ReadBytes

.code
; Read/WriteBytes Commands Example

; Create a 50 byte memory bank
bnkTest=CreateBank(500)

; Let's fill the bank with random data
For t = 1 To 50

	PokeByte bnkTest,t,Rnd(255)
	
Next

; Open a file to write to
fileBank=WriteFile("test.bnk")
; Write the bank to the file
WriteBytes bnkTest,fileBank,0,50
; Close it
CloseFile fileBank

; Free the bank
FreeBank bnkTest

; Make a new one
bnkTest=CreateBank(500)

; Open the file to read from
fileBank=OpenFile("test.bnk")
; Write the bank to the file
ReadBytes bnkTest,fileBank,0,50
; Close it
CloseFile fileBank

; Write back the results!
For t = 1 To 50
	
	Print PeekByte (bnkTest,t)

Next

