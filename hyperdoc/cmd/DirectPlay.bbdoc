:StartNetGame()

.args
None.

.desc
Displays a Windows dialog with option to join or start a new multiplayer  network game, via modem, serial connection or TCP/IP (Internet).


Note: This command must be started before any other network commands, otherwise  they will fail.


A return value of 0 indicates failure, 1 means a game was joined and 2 means  a game was created and is being hosted on the local machine. 

.code
newGame = StartNetGame()
; Check the status of the new game.
If newGame = 0 Then
print "Could not start or join net game."
ElseIf newGame = 1
print "Successfully joined the network game."
ElseIf newGame = 2
print "A new network game was started."
EndIf


:HostNetGame (gamename$)

.args
gamename$ = string value designating the game's name

.desc
This allows you to bypass the 'standard' networked game dialog box (normally  using StartNetGame) and start a hosted game directly.  A value of 2 is returned if the hosted game has started successfully. 

.code
; HostNetGame example

joinResults=HostNetGame("ShaneGame")

Select joinResults
Case 2
Print "Successfully started host game!"
Default
Print "Game was unable to start!"
End Select 
waitkey()


:JoinNetGame (gamename$,serverIP$)

.args
gamename$ = valid string containing game name to join
serverIP$ = IP address of computer hosting game 

.desc
Use this command to join a network game, bypassing the dialog box normally  endured with the StartNetGame command.

This returns 0 if the command failed, or 1 if the game was joined successfully.

.code
; JoinNetGame example
; Note; run the HostNetGame example code on the other computer
; you wish to join with

gamename$="ShaneGame"
; Change this to match the other computer's IP!
serverIP$="0.0.0.0"

; Make the join attempt
joinResults=JoinNetGame(gamename$,serverIP$)

Select joinResults
Case 1
Print "Joined the game successfully!"
Default
Print "Joining the game was unsuccessful."
End Select
WaitKey()


:StopNetGame

.args
None.

.desc
Use this command to terminate the network game currently in progress (started  with the StartNetGame() command). If possible,  the hosting session will transfer to another machine connected to the network  game.

.code
; stopNetGame() example

newGame = StartNetGame()
; Check the status of the new game.
If newGame = 0 Then
print "Could not start or join net game."
ElseIf newGame = 1
print "Successfully joined the network game."
ElseIf newGame = 2
print "A new network game was started."
EndIf
waitkey()
StopNetGame()
print "The Network game was stopped."


:CreateNetPlayer (name$)

.args
name$ = any valid string holding the player's name.

.desc
Creates a new local player. This also causes a special message to be sent  to all remote machines (see NetMsgType). This returns  an integer player number to be used in sending/receiving messages. Note that  you must create at least one player before you can send and receive messages. 

.code
; CreateNetPlayer example

newGame = StartNetGame()
; Check the status of the new game.
If newGame = 0 Then
Print "Could not start or join net game."
End

ElseIf newGame = 1
Print "Successfully joined the network game"
ElseIf newGame = 2
Print "A new network game was started!"
EndIf

; Create a random player name
name$="Player" + Rand(100)

; Get a unique player id number for the player
; and create the player
playerID=CreateNetPlayer(name$)

If playerID = 0 Then 
Print "Player could not be created!"
Else
Print "Player " + name$ + " was created and given ID#" + playerID
End If
WaitKey()


:DeleteNetPlayer playerID

.args
playerID = value assigned when player was created with CreateNetPlayer

.desc
Using the playerID generated by the CreateNetPlayer  command, this command will remove the designated player from the network game.


This also causes a special message to be sent to all remote machines (see NetMsgType). 

.code
; DeleteNetPlayer example

newGame = StartNetGame()
; Check the status of the new game. If newGame = 0 Then
Print "Could not start or join net game."
End

ElseIf newGame = 1
Print "Successfully joined the network game"
ElseIf newGame = 2
Print "A new network game was started!"
EndIf

; Create a random player name
name$="Player" + Rand(100)

; Get a unique player id number for the player
; and create the player
playerID=CreateNetPlayer(name$)

If playerID = 0 Then 
Print "Player could not be created!"
Else
Print "Player " + name$ + " was created and given ID#" + playerID
WaitKey()
; delete the player!
DeleteNetPlayer playerID
Print "The local player was deleted!"
End If
waitkey()


:NetPlayerName$ (playerID)

.args
playerID = a valid player ID number (get from the NetMsgFrom() command

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk).


Use this command in conjunction with the NetMsgFrom()  (to get the player's ID) command to derive the actual name of the player. This  command returns a string value.


You will use NetMsgType(), NetMsgFrom(), and NetMsgTo()  to get other important information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetPlayerName$() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
Print "(Message was from:"+ NetPlayerName$(NetMsgFrom()) + ")"
End If
End If
Wend


:NetPlayerLocal (playerID)

.args
playerID = a valid player ID number (get from the NetMsgFrom() command)

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk).


Use this command in conjunction with the NetMsgFrom()  (to get the player's ID) command to check and see if the player in question  is on the local machine (as opposed to a remote machine). You may wish to act  differently in your program based on whether the message that came in was from  a local or remote machine.


You will use NetMsgType(), NetMsgFrom(), and NetMsgTo()  to get other important information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetPlayerLocal example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
if NetPlayerLocal(NetMsgFrom()) then
print "(This was sent from a local player)"
end if
End If
End If
Wend


:RecvNetMsg()

.args
None.

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk).


This returns a TRUE value if a message was received, FALSE if none has been  received. This will typically go inside a function that is constantly being  checked for message and decode and handle them. You will use NetMsgType, NetMsgFrom, NetMsgTo, and NetMsgData$  to get the important information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; RecvNetMsg() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
End If
End If
Wend


:NetMsgType()

.args
None.

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk). You must've received  the message already, determined by the RecvNetMsg()  command.


The value returned from this command denotes the message; 1-99 means it is a  user message, 100 means a new player has joined the game, 101 means a player  has been deleted from the network game (NetMsgFrom()  returns the player deleted), 102 means the original host has left the game and  THIS machine is now the new host.


If you receive a 200, this means a fatal exception has occurred and you need  to exit the game.


You will use NetMsgFrom,  NetMsgTo, and NetMsgData$ to get the important  information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetMsgType() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
End If
End If
Wend


:NetMsgFrom()

.args
None.

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk). You must've received  the message already, determined by the RecvNetMsg()  command - and probably determined the type of message with (NetMsgType().


The value returned from this command denotes the sender's ID number assigned  to them when they were created with CreateNetPlayer  command. Use this to perform actions on the player on the local machine.


You will use NetMsgType(), NetMsgTo(), and NetMsgData$()  to get other important information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetMsgFrom() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
End If
End If
Wend


:NetMsgTo()

.args
None.

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk). You must've received  the message already, determined by the RecvNetMsg()  command - and probably determined the type of message with (NetMsgType().


The value returned from this command denotes the messages's intended recipient's  ID number assigned to them when they were created with CreateNetPlayer.


You will use NetMsgType(), NetMsgFrom(), and  NetMsgData$() to get other important information from the message and act  on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetMsgTo() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
Print "(Message was to:"+ NetMsgTo() + ")"
End If
End If
Wend


:NetMsgData$()

.args
None.

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk). You must've received  the message already, determined by the RecvNetMsg()  command - and probably determined the type of message with (NetMsgType().


The string value returned from this command is the actual message text that  was sent.


You will use NetMsgType(), NetMsgFrom(), and NetMsgTo()  to get other important information from the message and act on it.


The example requires that you run it on a remote machine while the local computer  runs the example in the SendNetMsg command.

.code
; NetMsgData$() example
; --------------------
; Run this program on the REMOTE computer to 'watch'
; the activity of the SendNetMsg example. Run that
; example on local machine.
;
; This program will tell you when a player involved in
; the game hits a wall ...

; We'll use this instead of JoinHostGame - make it easier
StartNetGame()

; Create a player - a player must be created to
; receive mesages!
playerID=CreateNetPlayer("Shane")

; Loop and get status
While Not KeyHit(1)

; Check to see if we've received a message
If RecvNetMsg() Then

; if we did, let's figure out what type it is
; we know it will be a user message, though
msgType=NetMsgType()

; 1-99 means a user message
If msgType>0 And msgType<100 Then

; Let's see who the message was from
msgFrom=NetMsgFrom()

; Let's get the message!
msgData$=NetMsgData$()

; Print the message
Print msgData$
Print "(Message was to:"+ NetMsgTo() + ")"
End If
End If
Wend


:SendNetMsg type,data$,from,to,reliable

.args
type = value 1-99
data$ = string containing message to send
from = player ID of the sender
to = player ID of the recipient (0=broadcast)
reliable = flag for sending message reliably 

.desc
First off, this ONLY works when you have joined a network game via StartNetGame or JoinNetGame  and you have created a player via CreateNetPlayer  (you must create a player, even if it is just to lurk).


This is probably the most complicated of the networking commands. This what  you use to actually send a message to one or all of the players on the network  game. The other players will use RecvNetMsg()  to intercept your message. 

The TYPE parameter is a number from 1 to 99. These values are denoted as 'user  messages'.


The Data$ parameter is the actual string that contains the message you want  to send. Helpful to know that in order to keep traffic low, you will want to  combine details of a message into a single message instead of sending multiple  messages with a single element. For example, you might want to send X, Y, and  FRAME in a single string like "200,100,4" and parse it out at the recipient's  end.


FROM is the player's ID that is sending the message. This is the value returned  from the CreateNetPlayer() command.


TO is the player's ID you wish to send the message to. A default value of 0  will broadcast to ALL players.


The RELIABLE flag will put a priority on the message and it will ensure there  is no packet loss in the delivery. However, it is at least 3 times slower than  a regular non-reliable message.


The example requires that you run it on the local machine while the remote computer  runs the example in the RecvNetMsg() command.

.code
; SendNetMsg example
; ------------------
; Run this example on the local computer
; run the example for RecvNetMsg() on a remote computer

; Graphics mode with double buffering
Graphics 640,480,16
SetBuffer BackBuffer()

; Create a network game with NO requester
joinStatus=HostNetGame("ShaneGame")

; A type to hold all the player's information
Type multi
Field x
Field y
Field id
Field name$
Field xspeed
Field boxColor
End Type

; make sure the game started ok...
If joinStatus=2 Then
Print "Hosted game started... "
Else
Print "Hosted game could not be started!"
End
End If

; Create 5 local players using TYPEs
For t = 1 To 5
; New type instance
player.multi = New Multi
; Assign the ID field with the created player ID and name him
playerID=CreateNetPlayer("Player" + t)

; if the player was created ok ... assign some random parameters
If playerID <> 0 Then 
player
ame$="Player" + t
playerx = Rand(640)
playery = Rand(480)
playeroxColor = Rand(255)
playerxspeed = Rand(1,5)
; Print some text results
Print "Player " + t + " has joined the game with ID=" + playerID
Else
Print "The player couldn't join! Aborting!"
End If
Next

; We've got them all! Wait for a key
Print "All local players are joined! Press a key ..."
WaitKey()

; Loop this routine
While Not KeyHit(1)
Cls
; for each of the players, update their locations on the screen
For player = Each multi
Color playeroxColor,playeroxColor,playeroxColor
Rect playerx,playery,10,10,1
Text playerx-10,playery-15,player
ame$
playerx = playerx + playerxspeed
If playerx > 640 Or playerx < 0 Then 
playerxspeed=-playerxspeed
message$="Player ID #" + playerID + " hit a wall!"
; Send a broadcast message if a player rebounds off the wall
; this message will show up on the remote machine
SendNetMsg Rand(1,99),message$,playerid,0
End If
Next
Flip
Wend
End


