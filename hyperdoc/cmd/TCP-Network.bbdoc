:OpenTCPStream (ip$,port)

.args
ip$=Address of stream
port=TCP/IP Port Number

.desc
Use this command to open up a TCP/IP stream to the designated server and  port. If the open command was successful, the command returns a stream handle.  Otherwise it returns 0.


You can use this for a multitude of different 'internet' options. Obviously  to contact a TCP/IP host outside your own network, you'll need to be connected  to the Internet.


The IP address can be in the form of 1.2.3.4 or "www.domain.com".

.code
; OpenTCPStream/CloseTCPStream Example

Print "Connecting..."
tcp=OpenTCPStream( "www.blitzbasement.com",80 )

If Not tcp Print "Failed.":WaitKey:End

Print "Connected! Sending request..."

WriteLine tcp,"GET http://www.blitzbasement.com HTTP/1.0"
WriteLine tcp,Chr$(10)

If Eof(tcp) Print "Failed.":WaitKey:End

Print "Request sent! Waiting for reply..."

While Not Eof(tcp)
Print ReadLine$( tcp )
Wend

If Eof(tcp)=1 Then Print "Success!" Else Print "Error!"

CloseTCPStream tcp

WaitKey
End


:CloseTCPStream streamhandle

.args
streamhandle = handle assigned when the stream was opened.

.desc
Once you've completed the use of your TCP/IP stream, close the connection  you opened with OpenTCPStream with this command.

.code
; OpenTCPStream/CloseTCPStream Example

Print "Connecting..."
tcp=OpenTCPStream( "www.blitzbasement.com",80 )

If Not tcp Print "Failed.":WaitKey:End

Print "Connected! Sending request..."

WriteLine tcp,"GET http://www.blitzbasement.com HTTP/1.0"
WriteLine tcp,Chr$(10)

If Eof(tcp) Print "Failed.":WaitKey:End

Print "Request sent! Waiting for reply..."

While Not Eof(tcp)
Print ReadLine$( tcp )
Wend

If Eof(tcp)=1 Then Print "Success!" Else Print "Error!"

CloseTCPStream tcp

WaitKey
End


:CreateTCPServer (port)

.args
port = the port to use when creating the server

.desc
Creates a TCP/IP server with the designated port. Use this for communications  between other clients and the local box. See OpenTCPStream, CloseTCPServer, and CloseTCPStream for more information.


Returns a TCP/IP server handle if successful or 0 if not.

.code
; CreateTCPServer, CloseTCPServer, AcceptTCPStream Example
; This code is in two parts, and needs to be run seperately on the same machine

; --- Start first code set ---
; Create a server and listen for push

svrGame=CreateTCPServer(8080)

If svrGame<>0 Then 
Print "Server started successfully."
Else
Print "Server failed to start."
End
End If

While Not KeyHit(1)
strStream=AcceptTCPStream(svrGame)
If strStream Then 
Print ReadString$(strStream)
Delay 2000
End
Else 
Print "No word from Apollo X yet ..."
Delay 1000
End If 
Wend

End

; --- End first code set ---


; --- Start second code set ---
; Copy this code to another instance of Blitz Basic
; Run the above code first, then run this ... they will 'talk'

; Create a Client and push data

strmGame=OpenTCPStream("127.0.0.1",8080)

If strmGame<>0 Then 
Print "Client Connected successfully."
Else
Print "Server failed to connect."
WaitKey 
End
End If

; write stream to server
WriteString strmGame,"Mission Control, this is Apollo X ..."
Print "Completed sending message to Mission control..."

; --- End second code set ---


:AcceptTCPStream (serverhandle)

.args
serverhandle = the server handle assigned when the server was created

.desc
Accepts an incoming TCP/IP stream, and returns a TCP/IP stream if one is  available, or 0 if not.


See CreateTCPServer and CloseTCPServer.

.code
; CreateTCPServer, CloseTCPServer, AcceptTCPStream Example
; This code is in two parts, and needs to be run seperately on the same machine

; --- Start first code set ---
; Create a server and listen for push

svrGame=CreateTCPServer(8080)

If svrGame<>0 Then 
Print "Server started successfully."
Else
Print "Server failed to start."
End
End If

While Not KeyHit(1)
strStream=AcceptTCPStream(svrGame)
If strStream Then 
Print ReadString$(strStream)
Delay 2000
End
Else 
Print "No word from Apollo X yet ..."
Delay 1000
End If 
Wend

End

; --- End first code set ---


; --- Start second code set ---
; Copy this code to another instance of Blitz Basic
; Run the above code first, then run this ... they will 'talk'

; Create a Client and push data

strmGame=OpenTCPStream("127.0.0.1",8080)

If strmGame<>0 Then 
Print "Client Connected successfully."
Else
Print "Server failed to connect."
WaitKey 
End
End If

; write stream to server
WriteString strmGame,"Mission Control, this is Apollo X ..."
Print "Completed sending message to Mission control..."

; --- End second code set ---


:CloseTCPServer serverhandle

.args
serverhandle = handle assigned when the server was created.

.desc
Closes a TCP/IP server previously created with the CreateTCPServer command.

.code
; CreateTCPServer, CloseTCPServer, AcceptTCPStream Example
; This code is in two parts, and needs to be run seperately on the same machine

; --- Start first code set ---
; Create a server and listen for push

svrGame=CreateTCPServer(8080)

If svrGame<>0 Then 
Print "Server started successfully."
Else
Print "Server failed to start."
End
End If

While Not KeyHit(1)
strStream=AcceptTCPStream(svrGame)
If strStream Then 
Print ReadString$(strStream)
Delay 2000
End
Else 
Print "No word from Apollo X yet ..."
Delay 1000
End If 
Wend

End

; --- End first code set ---


; --- Start second code set ---
; Copy this code to another instance of Blitz Basic
; Run the above code first, then run this ... they will 'talk'

; Create a Client and push data

strmGame=OpenTCPStream("127.0.0.1",8080)

If strmGame<>0 Then 
Print "Client Connected successfully."
Else
Print "Server failed to connect."
WaitKey 
End
End If

; write stream to server
WriteString strmGame,"Mission Control, this is Apollo X ..."
Print "Completed sending message to Mission control..."

; --- End second code set ---


:TCPStreamIP( tcp_stream )

.args
tcp_stream - TCP stream handle

.desc
Returns the integer IP address of the specified tcp_stream. The address  returned is always that of the client machine.

.code
None.

:TCPStreamPort( tcp_stream )

.args
tcp_stream - TCP stream handle

.desc
Returns the port number of the specified TCP stream. The port number returned  is always that of the client machine.

.code
None.

:TCPTimeouts read_millis,accept_millis

.args
read_millis - milliseconds value
accept_millis - milliseconds value 

.desc
read_millis allows you to control how long reading data into a TCP stream  can take before causing an error. By default, this is set to 10,000 (10 seconds).  This means that if data takes longer than 10 seconds to arrive, an error occurs  and the stream can not be used any more.


accept_millis allows you to control how the AcceptTCPStream()  function will wait for a new connection. By default, this value is 0, so AcceptTCPStream() will return immediately  if there is no new connection available.

.code
None.


